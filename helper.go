package main

import (
	// "fmt"
    // "context"
	// "time"
	// // "log"

	"github.com/microsoftgraph/msgraph-sdk-go/models"
)

func GetUserProperties(user models.Userable) *UserProperties {
    // regUsers := user.GetRegisteredUsers().Get(context.TODO(), nil )
    return &UserProperties{
        AboutMe:              user.GetAboutMe(),
        AccountEnabled:     user.GetAccountEnabled(),
        Activities:    user.GetActivities(),
        AgeGroup:           user.GetAgeGroup(),
        AgreementAcceptances: user.GetAgreementAcceptances(),
       	AppRoleAssignments: user.GetAppRoleAssignments(),
       	AssignedLicenses: user.GetAssignedLicenses(),
       	AssignedPlans: user.GetAssignedPlans(),
       	Authentication: user.GetAuthentication(),
       	AuthorizationInfo: user.GetAuthorizationInfo(),
       	Birthday: user.GetBirthday(),
       	BusinessPhones: user.GetBusinessPhones(),
       	Calendar: user.GetCalendar(),
       	CalendarGroups: user.GetCalendarGroups(),
       	Calendars: user.GetCalendars(),
       	CalendarView: user.GetCalendarView(),
       	Chats: user.GetChats(),
       	City: user.GetCity(),
       	CloudClipboard: user.GetCloudClipboard(),
        CompanyName: user.GetCompanyName(),
       	ConsentProvidedForMinor: user.GetConsentProvidedForMinor(),
       	ContactFolders: user.GetContactFolders(),
       	Contacts: user.GetContacts(),
       	Country: user.GetCountry(),
        CreatedDateTime: user.GetCreatedDateTime(),
        CreatedObjects: user.GetCreatedObjects(),
        CreationType: user.GetCreationType(),
        CustomSecurityAttributes: user.GetCustomSecurityAttributes(),
        Department: user.GetDepartment(),
        DeviceEnrollmentLimit: user.GetDeviceEnrollmentLimit(),
        DeviceManagementTroubleshootingEvents: user.GetDeviceManagementTroubleshootingEvents(),
	    DirectReports: user.GetDirectReports(),
	    DisplayName: user.GetDisplayName(),
	    Drive: user.GetDrive(),
	    Drives: user.GetDrives(),
	    EmployeeExperience: user.GetEmployeeExperience(),
	    EmployeeHireDate: user.GetEmployeeHireDate(),
	    EmployeeId: user.GetEmployeeId(),
	    EmployeeLeaveDateTime: user.GetEmployeeLeaveDateTime(),
	    EmployeeOrgData: user.GetEmployeeOrgData(),
	    EmployeeType: user.GetEmployeeType(),
	    Events: user.GetEvents(),
	    Extensions: user.GetExtensions(),
	    ExternalUserState: user.GetExternalUserState(),
	    ExternalUserStateChangeDateTime: user.GetExternalUserStateChangeDateTime(),
	    FaxNumber: user.GetFaxNumber(),
	    FollowedSites: user.GetFollowedSites(),
	    GivenName: user.GetGivenName(),
	    HireDate: user.GetHireDate(),
	    Identities: user.GetIdentities(),
	    ImAddresses: user.GetImAddresses(),
	    InferenceClassification: user.GetInferenceClassification(),
	    Insights: user.GetInsights(),
	    Interests: user.GetInterests(),
	    IsResourceAccount: user.GetIsResourceAccount(),
	    JobTitle: user.GetJobTitle(),
	    JoinedTeams: user.GetJoinedTeams(),
	    LastPasswordChangeDateTime: user.GetLastPasswordChangeDateTime(),
	    LegalAgeGroupClassification: user.GetLegalAgeGroupClassification(),
	    LicenseAssignmentStates: user.GetLicenseAssignmentStates(),
	    LicenseDetails: user.GetLicenseDetails(),
	    Mail: user.GetMail(),
	    MailboxSettings: user.GetMailboxSettings(),
	    MailFolders: user.GetMailFolders(),
	    MailNickname: user.GetMailNickname(),
	    ManagedAppRegistrations: user.GetManagedAppRegistrations(),
	    ManagedDevices: user.GetManagedDevices(),
	    Manager: user.GetManager(),
	    MemberOf: user.GetMemberOf(),
	    Messages: user.GetMessages(),
	    MobilePhone: user.GetMobilePhone(),
	    MySite: user.GetMySite(),
	    Oauth2PermissionGrants: user.GetOauth2PermissionGrants(),
	    OfficeLocation: user.GetOfficeLocation(),
	    Onenote: user.GetOnenote(),
	    OnlineMeetings: user.GetOnlineMeetings(),
	    OnPremisesDistinguishedName: user.GetOnPremisesDistinguishedName(),
	    OnPremisesDomainName: user.GetOnPremisesDomainName(),
	    OnPremisesExtensionAttributes: user.GetOnPremisesExtensionAttributes(),
	    OnPremisesImmutableId: user.GetOnPremisesImmutableId(),
	    OnPremisesLastSyncDateTime: user.GetOnPremisesLastSyncDateTime(),
	    OnPremisesProvisioningErrors: user.GetOnPremisesProvisioningErrors(),
	    OnPremisesSamAccountName: user.GetOnPremisesSamAccountName(),
	    OnPremisesSecurityIdentifier: user.GetOnPremisesSecurityIdentifier(),
	    OnPremisesSyncEnabled: user.GetOnPremisesSyncEnabled(),
	    OnPremisesUserPrincipalName: user.GetOnPremisesUserPrincipalName(),
	    OtherMails: user.GetOtherMails(),
	    Outlook: user.GetOutlook(),
	    OwnedDevices: user.GetOwnedDevices(),
	    OwnedObjects: user.GetOwnedObjects(),
	    PasswordPolicies: user.GetPasswordPolicies(),
	    PasswordProfile: user.GetPasswordProfile(),
	    PastProjects: user.GetPastProjects(),
	    People: user.GetPeople(),
	    PermissionGrants: user.GetPermissionGrants(),
	    Photo: user.GetPhoto(),
	    Photos: user.GetPhotos(),
	    Planner: user.GetPlanner(),
	    PostalCode: user.GetPostalCode(),
	    PreferredDataLocation: user.GetPreferredDataLocation(),
	    PreferredLanguage: user.GetPreferredLanguage(),
	    PreferredName: user.GetPreferredName(),
	    Presence: user.GetPresence(),
	    Print: user.GetPrint(),
	    ProvisionedPlans: user.GetProvisionedPlans(),
	    ProxyAddresses: user.GetProxyAddresses(),
	    RegisteredDevices: user.GetRegisteredDevices(),
	    Responsibilities: user.GetResponsibilities(),
	    Schools: user.GetSchools(),
	    ScopedRoleMemberOf: user.GetScopedRoleMemberOf(),
	    SecurityIdentifier: user.GetSecurityIdentifier(),
	    ServiceProvisioningErrors: user.GetServiceProvisioningErrors(),
	    Settings: user.GetSettings(),
	    ShowInAddressList: user.GetShowInAddressList(),
	    SignInActivity: user.GetSignInActivity(),
	    SignInSessionsValidFromDateTime: user.GetSignInSessionsValidFromDateTime(),
	    Skills: user.GetSkills(),
	    Sponsors: user.GetSponsors(),
	    State: user.GetState(),
	    StreetAddress: user.GetStreetAddress(),
	    Surname: user.GetSurname(),
	    Teamwork: user.GetTeamwork(),
	    Todo: user.GetTodo(),
	    TransitiveMemberOf: user.GetTransitiveMemberOf(),
	    UsageLocation: user.GetUsageLocation(),
	    UserPrincipalName: user.GetUserPrincipalName(),
	    UserType: user.GetUserType(),
    }
}

func GetGroupProperties(group models.Groupable) *GroupProperties{
	return &GroupProperties{
		 AcceptedSenders: group.GetAcceptedSenders(),
         AllowExternalSenders: group.GetAllowExternalSenders(),
         AppRoleAssignments: group.GetAppRoleAssignments(),
         AssignedLabels: group.GetAssignedLabels(),
         AssignedLicenses: group.GetAssignedLicenses(),
         AutoSubscribeNewMembers: group.GetAutoSubscribeNewMembers(),
         Calendar: group.GetCalendar(),
         CalendarView: group.GetCalendarView(),
         Classification: group.GetClassification(),
         Conversations: group.GetConversations(),
         CreatedDateTime: group.GetCreatedDateTime(),
         CreatedOnBehalfOf: group.GetCreatedOnBehalfOf(),
         Description: group.GetDescription(),
         DisplayName: group.GetDisplayName(),
         Drive: group.GetDrive(),
         Drives: group.GetDrives(),
         Events: group.GetEvents(),
         ExpirationDateTime: group.GetExpirationDateTime(),
         Extensions: group.GetExtensions(),
         GroupLifecyclePolicies: group.GetGroupLifecyclePolicies(),
         GroupTypes: group.GetGroupTypes(),
         HasMembersWithLicenseErrors: group.GetHasMembersWithLicenseErrors(),
         HideFromAddressLists: group.GetHideFromAddressLists(),
         HideFromOutlookClients: group.GetHideFromOutlookClients(),
         IsArchived: group.GetIsArchived(),
         IsAssignableToRole: group.GetIsAssignableToRole(),
         IsSubscribedByMail: group.GetIsSubscribedByMail(),
         LicenseProcessingState: group.GetLicenseProcessingState(),
         Mail: group.GetMail(),
         MailEnabled: group.GetMailEnabled(),
         MailNickname: group.GetMailNickname(),
         MemberOf: group.GetMemberOf(),
         Members: group.GetMembers(),
         MembershipRule: group.GetMembershipRule(),
         MembershipRuleProcessingState: group.GetMembershipRuleProcessingState(),
         MembersWithLicenseErrors: group.GetMembersWithLicenseErrors(),
         Onenote: group.GetOnenote(),
         OnPremisesDomainName: group.GetOnPremisesDomainName(),
         OnPremisesLastSyncDateTime: group.GetOnPremisesLastSyncDateTime(),
         OnPremisesNetBiosName: group.GetOnPremisesNetBiosName(),
         OnPremisesProvisioningErrors: group.GetOnPremisesProvisioningErrors(),
         OnPremisesSamAccountName: group.GetOnPremisesSamAccountName(),
         OnPremisesSecurityIdentifier: group.GetOnPremisesSecurityIdentifier(),
         OnPremisesSyncEnabled: group.GetOnPremisesSyncEnabled(),
         Owners: group.GetOwners(),
         PermissionGrants: group.GetPermissionGrants(),
         Photo: group.GetPhoto(),
         Photos: group.GetPhotos(),
         Planner: group.GetPlanner(),
         PreferredDataLocation: group.GetPreferredDataLocation(),
         PreferredLanguage: group.GetPreferredLanguage(),
         ProxyAddresses: group.GetProxyAddresses(),
         RejectedSenders: group.GetRejectedSenders(),
         RenewedDateTime: group.GetRenewedDateTime(),
         SecurityEnabled: group.GetSecurityEnabled(),
         SecurityIdentifier: group.GetSecurityIdentifier(),
         ServiceProvisioningErrors: group.GetServiceProvisioningErrors(),
         Settings: group.GetSettings(),
         Sites: group.GetSites(),
         Team: group.GetTeam(),
         Theme: group.GetTheme(),
         Threads: group.GetThreads(),
         TransitiveMemberOf: group.GetTransitiveMemberOf(),
         TransitiveMembers: group.GetTransitiveMembers(),
         UniqueName: group.GetUniqueName(),
         UnseenCount: group.GetUnseenCount(),
         Visibility: group.GetVisibility(),
	}
}

func GetRoleProperties(role models.DirectoryRoleable) *DirectoryRoleProperties {
	 return &DirectoryRoleProperties {
	 	 Description: role.GetDescription(),
	     DisplayName: role.GetDisplayName(),
	     Members: role.GetMembers(),
	     RoleTemplateId: role.GetRoleTemplateId(),
	     ScopedMembers: role.GetScopedMembers(),
 	}
}

func GetAdminUnitProperties(adminUnit models.AdministrativeUnitable) *AdminUnitProperties{
	return &AdminUnitProperties {
		Description: adminUnit.GetDescription(),
	    DisplayName: adminUnit.GetDisplayName(),
	    Extensions: adminUnit.GetExtensions(),
	    Members: adminUnit.GetMembers(),
	    ScopedRoleMembers: adminUnit.GetScopedRoleMembers(),
	    Visibility: adminUnit.GetVisibility(),
	}
}